# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: CI
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: borales/actions-yarn@v2.3.0

      # Runs a single command using the runners shell
      - name: Installing Dependencies
        run: yarn install

      # Runs a set of commands using the runners shell
      - name: Run Tests
        run: npx hardhat test
        env:
          ALCHEMY_KEY: ${{ secrets.ALCHEMY_KEY }}

      # Runs a set of commands using the runners shell
      - name: Run Coverage
        run: |
          yarn global add codecov
          npx hardhat coverage
          codecov -f coverage/*.json
        env:
          ALCHEMY_KEY: ${{ secrets.ALCHEMY_KEY }}

      # - name: Set up Python 3.8
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.8

      # - name: Install Slither
      #   run: pip3 install slither-analyzer
      # - name: Prepare output
      #   run: |
      #     mkdir -p CI/slither-output
      # - name: Run analysis
      #   shell: bash
      #   run: |
      #     slither . --json-types compilations,console,detectors,printers,list-detectors,list-printers --exclude-dependencies --compile-force-framework hardhat >>CI/slither-output/slither_report.txt 2>&1 || true
      #   # more complicated example
      #   # slither --exclude=divide-before-multiply,unused-return,timestamp,naming-convention,pragma,solc-version,external-function,reentrancy-benign,reentrancy-no-eth,arbitrary-send,incorrect-equality,reentrancy-events,assembly,uninitialized-local --filter-paths="@openzeppelin|WETH9.sol|uniswapV2"
      # - name: Store the report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: slither-report
      #     path: CI/slither-output/slither_report.txt
      # - name: Check status
      #   shell: bash
      #   run: |
      #     FALSE_POSITIVE_WARNINGS=7
      #     FOUND_WARNINGS=`grep "\d+ result" -Po CI/slither-output/slither_report.txt | sed 's/ result//g'`
      #     echo "Slither has found $FOUND_WARNINGS issues"
      #     if [[ $FOUND_WARNINGS -gt $FALSE_POSITIVE_WARNINGS ]]; then echo "$FOUND_WARNINGS issues exceeds limit" >&2; exit 1; fi
